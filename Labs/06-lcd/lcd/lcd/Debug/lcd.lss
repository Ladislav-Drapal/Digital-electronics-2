
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011e  0080011e  000005bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126c  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b6  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089e  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000926  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	87 eb       	ldi	r24, 0xB7	; 183
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_data>:
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a8:	08 95       	ret

000001aa <lcd_gotoxy>:
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <lcd_gotoxy+0xc>
 1ae:	80 58       	subi	r24, 0x80	; 128
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret
 1b6:	80 54       	subi	r24, 0x40	; 64
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_clrscr>:
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1c4:	08 95       	ret

000001c6 <lcd_putc>:
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	fc 01       	movw	r30, r24
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <lcd_puts+0xe>
 1d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
 1da:	fe 01       	movw	r30, r28
 1dc:	ef 01       	movw	r28, r30
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	80 81       	ld	r24, Z
 1e2:	81 11       	cpse	r24, r1
 1e4:	f8 cf       	rjmp	.-16     	; 0x1d6 <lcd_puts+0x8>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1f0:	84 b1       	in	r24, 0x04	; 4
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	80 61       	ori	r24, 0x10	; 16
 206:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 208:	8a b1       	in	r24, 0x0a	; 10
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	99 ef       	ldi	r25, 0xF9	; 249
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x32>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x38>
 224:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x4e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x54>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x5e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x64>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x6e>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x74>
 260:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	8f 7e       	andi	r24, 0xEF	; 239
 266:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 268:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x84>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_init+0x8a>
 276:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 284:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
    lcd_puts("00:00.0");
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	lcd_gotoxy(12, 0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	8c e0       	ldi	r24, 0x0C	; 12
 2b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_puts("a");
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	lcd_gotoxy(1, 1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_puts("b");
 2c6:	8a e1       	ldi	r24, 0x1A	; 26
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	lcd_gotoxy(12, 1);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_puts("c");
 2d6:	8c e1       	ldi	r24, 0x1C	; 28
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
	    
		
	lcd_command(1 << LCD_CGRAM);
 2de:	80 e4       	ldi	r24, 0x40	; 64
 2e0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
	for (uint8_t i = 0; i < 8; i++)
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <main+0x60>
	{
	// Store all new chars to memory line by line
    lcd_data(customChar[i]);
 2e8:	ec 2f       	mov	r30, r28
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	e0 50       	subi	r30, 0x00	; 0
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	80 81       	ld	r24, Z
 2f2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_data>
	lcd_gotoxy(12, 1);
	lcd_puts("c");
	    
		
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
 2f8:	c8 30       	cpi	r28, 0x08	; 8
 2fa:	b0 f3       	brcs	.-20     	; 0x2e8 <main+0x50>
	{
	// Store all new chars to memory line by line
    lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
	    
	// Display first custom character
	lcd_putc(0);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
	lcd_gotoxy(0,1);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_putc(1);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt
	TIM2_overflow_33ms();
 316:	e1 eb       	ldi	r30, 0xB1	; 177
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8a 7f       	andi	r24, 0xFA	; 250
 31e:	80 83       	st	Z, r24
 320:	80 81       	ld	r24, Z
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 326:	e0 e7       	ldi	r30, 0x70	; 112
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
	
	


    // Enables interrupts by setting the global interrupt mask
    sei();
 330:	78 94       	sei
 332:	ff cf       	rjmp	.-2      	; 0x332 <main+0x9a>

00000334 <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	26 97       	sbiw	r28, 0x06	; 6
 360:	de bf       	out	0x3e, r29	; 62
 362:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	90 e2       	ldi	r25, 0x20	; 32
 368:	9a 83       	std	Y+2, r25	; 0x02
 36a:	89 83       	std	Y+1, r24	; 0x01
	
	int16_t sec_sqr;
	char lcd_string_sqr[4] = " ";
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	9c 83       	std	Y+4, r25	; 0x04
 372:	8b 83       	std	Y+3, r24	; 0x03
 374:	1e 82       	std	Y+6, r1	; 0x06
 376:	1d 82       	std	Y+5, r1	; 0x05

    number_of_overflows++;
 378:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <number_of_overflows.1951>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <number_of_overflows.1951>
    if (number_of_overflows >= 6)
 382:	86 30       	cpi	r24, 0x06	; 6
 384:	08 f4       	brcc	.+2      	; 0x388 <__vector_9+0x54>
 386:	48 c0       	rjmp	.+144    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 388:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <number_of_overflows.1951>

        // WRITE YOUR CODE HERE
		tens++;
 38c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tens.1952>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tens.1952>
		if(tens >=10)
 396:	8a 30       	cpi	r24, 0x0A	; 10
 398:	f0 f0       	brcs	.+60     	; 0x3d6 <__vector_9+0xa2>
		{
			tens = 0;
 39a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <tens.1952>
			secs++;
 39e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
			if(secs >= 60) secs = 0;
 3a8:	8c 33       	cpi	r24, 0x3C	; 60
 3aa:	10 f0       	brcs	.+4      	; 0x3b0 <__vector_9+0x7c>
 3ac:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
			sec_sqr = secs * secs;
 3b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3b4:	4a e0       	ldi	r20, 0x0A	; 10
 3b6:	be 01       	movw	r22, r28
 3b8:	6d 5f       	subi	r22, 0xFD	; 253
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	88 9f       	mul	r24, r24
 3be:	c0 01       	movw	r24, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	0e 94 4e 02 	call	0x49c	; 0x49c <__itoa_ncheck>
			itoa(sec_sqr, lcd_string_sqr,10);
			lcd_gotoxy(12,0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
			lcd_puts(lcd_string_sqr);
 3ce:	ce 01       	movw	r24, r28
 3d0:	03 96       	adiw	r24, 0x03	; 3
 3d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		}
		
		lcd_gotoxy(7,0);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	87 e0       	ldi	r24, 0x07	; 7
 3da:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		lcd_putc(tens + '0');
 3de:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tens.1952>
 3e2:	80 5d       	subi	r24, 0xD0	; 208
 3e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
		itoa(secs, lcd_string, 10);
 3e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 3ec:	4a e0       	ldi	r20, 0x0A	; 10
 3ee:	be 01       	movw	r22, r28
 3f0:	6f 5f       	subi	r22, 0xFF	; 255
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 4e 02 	call	0x49c	; 0x49c <__itoa_ncheck>
		lcd_gotoxy(4,0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
		
		if(secs <10)lcd_putc('0');
 402:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 406:	8a 30       	cpi	r24, 0x0A	; 10
 408:	18 f4       	brcc	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40a:	80 e3       	ldi	r24, 0x30	; 48
 40c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>
		lcd_puts(lcd_string);
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
		

    }
    // Else do nothing and exit the ISR
}
 418:	26 96       	adiw	r28, 0x06	; 6
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	bf 91       	pop	r27
 42e:	af 91       	pop	r26
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	7f 91       	pop	r23
 436:	6f 91       	pop	r22
 438:	5f 91       	pop	r21
 43a:	4f 91       	pop	r20
 43c:	3f 91       	pop	r19
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;

	lcd_gotoxy(1 + position, 1);
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_gotoxy>
	lcd_putc(symbol);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_putc>

	// WRITE YOUR CODE HERE
}
 47a:	ff 91       	pop	r31
 47c:	ef 91       	pop	r30
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	7f 91       	pop	r23
 488:	6f 91       	pop	r22
 48a:	5f 91       	pop	r21
 48c:	4f 91       	pop	r20
 48e:	3f 91       	pop	r19
 490:	2f 91       	pop	r18
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__itoa_ncheck>:
 49c:	bb 27       	eor	r27, r27
 49e:	4a 30       	cpi	r20, 0x0A	; 10
 4a0:	31 f4       	brne	.+12     	; 0x4ae <__itoa_ncheck+0x12>
 4a2:	99 23       	and	r25, r25
 4a4:	22 f4       	brpl	.+8      	; 0x4ae <__itoa_ncheck+0x12>
 4a6:	bd e2       	ldi	r27, 0x2D	; 45
 4a8:	90 95       	com	r25
 4aa:	81 95       	neg	r24
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__utoa_common>

000004b2 <__utoa_ncheck>:
 4b2:	bb 27       	eor	r27, r27

000004b4 <__utoa_common>:
 4b4:	fb 01       	movw	r30, r22
 4b6:	55 27       	eor	r21, r21
 4b8:	aa 27       	eor	r26, r26
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	aa 1f       	adc	r26, r26
 4c0:	a4 17       	cp	r26, r20
 4c2:	10 f0       	brcs	.+4      	; 0x4c8 <__utoa_common+0x14>
 4c4:	a4 1b       	sub	r26, r20
 4c6:	83 95       	inc	r24
 4c8:	50 51       	subi	r21, 0x10	; 16
 4ca:	b9 f7       	brne	.-18     	; 0x4ba <__utoa_common+0x6>
 4cc:	a0 5d       	subi	r26, 0xD0	; 208
 4ce:	aa 33       	cpi	r26, 0x3A	; 58
 4d0:	08 f0       	brcs	.+2      	; 0x4d4 <__utoa_common+0x20>
 4d2:	a9 5d       	subi	r26, 0xD9	; 217
 4d4:	a1 93       	st	Z+, r26
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	79 f7       	brne	.-34     	; 0x4b8 <__utoa_common+0x4>
 4da:	b1 11       	cpse	r27, r1
 4dc:	b1 93       	st	Z+, r27
 4de:	11 92       	st	Z+, r1
 4e0:	cb 01       	movw	r24, r22
 4e2:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <strrev>

000004e6 <strrev>:
 4e6:	dc 01       	movw	r26, r24
 4e8:	fc 01       	movw	r30, r24
 4ea:	67 2f       	mov	r22, r23
 4ec:	71 91       	ld	r23, Z+
 4ee:	77 23       	and	r23, r23
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <strrev+0x4>
 4f2:	32 97       	sbiw	r30, 0x02	; 2
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <strrev+0x18>
 4f6:	7c 91       	ld	r23, X
 4f8:	6d 93       	st	X+, r22
 4fa:	70 83       	st	Z, r23
 4fc:	62 91       	ld	r22, -Z
 4fe:	ae 17       	cp	r26, r30
 500:	bf 07       	cpc	r27, r31
 502:	c8 f3       	brcs	.-14     	; 0x4f6 <strrev+0x10>
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
